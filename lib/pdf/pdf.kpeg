%% name = Parser

%% header = ast Header(version)
%% integer = ast Integer(num)
%% real = ast Real(num)
%% namespace = ast Namespace(lang, namespace)
%% array = ast Array(elements)
%% name = ast Name(value)
%% string_literal= ast String(value)
%% dictionary = ast Dictionary(content)
%% dictionary_pair = ast Map(name,value)
%% bool_true = ast True()
%% bool_false = ast False()
%% xref = ast XRef(offset)
%% pdf = ast Pdf(header,trailer)
%% comment = ast Comment(com)



eol = "\n"

dictionary_content = /(.)*/

sp = %lit.space+
nl = NL
minus = %lit.dash
plus = "+"
- = %lit.space*



# numbers
NumericLiteral                  = < DecimalLiteral:literal | HexIntegerLiteral:literal > !(IdentifierStart) { literal }

DecimalLiteral                  = < DecimalIntegerLiteral "." DecimalDigit* ExponentPart? > ~number(text)
                                | < "." DecimalDigit+ ExponentPart? > ~number(text)
                                | < DecimalIntegerLiteral ExponentPart? > ~number(text)

DecimalIntegerLiteral           = < "0" | /[1-9]/m DecimalDigit* > ~number(text)

HexIntegerLiteral               = < "0x" HexDigit+ > ~number(text)
                                | < "0X" HexDigit+ > ~number(text)

DecimalDigit                    = /[0-9]/

ExponentPart                    = /[eE]/ SignedInteger

SignedInteger                   = DecimalDigit+
                                | "+" DecimalDigit+
                                | "-" DecimalDigit+

# strings









root = pdfheader:h trailer:t ~pdf(h,t)


# terminals

value = (ref | num | real | key | dict | array | string | hexstr | kword) delim
array = "[" delim (value)* "]" delim
string = STRBGN str* STREND
str = str_element str 
    | str_element
str_element = str_a+ str
	    | str_a+
	    | "(" str_element ")"
	    | "(" ")"

str_a= (!STRBGN !STREND !"\\" .) | ESCPAREN | "\\" .


obj = delim num num "obj" delim
    ( ref
    | dict
    | num
    | real
    | array
    | key
    | string
    | hexstr
    | kword
    )* delim
    'endobj' 


stream = delim num num 'obj' delim
       comment*
       dict
       ('stream' (CR LF|LF CR)
       | 'stream' (CR|LF) (.) 
       )


ref = num num 'R' delim
xref = 'xref' delim
     (POSITIVE
     POSITIVE
     DELIM

     XREFTAB* delim
     )+


trailer = 'trailer' delim dict delim
startxref = 'delim' 'startxref' delim num delim



POSITIVE = 
EOL = "\r\n" | "\r" | "\n"
SPACE = " " | "\t" | EOL
DELIM = (SPACE | EOL)*
STRBGN = "("
STREND = ")" DELIM
ESCPAREN "\\" "("
	  | "\\" ")"
	  | 
SP = " "
CR = "\r"
LF = "\n"

COMMENT = "%" + < (!EOL .)* > EOL ~comment(text)

string = STRBGN str* STREND

str = stre str
    | stre


stre = stra+ str
     | stra+ 
     |  < "(" stre ")" > { text }
     | < "(" ")" > { text }

stra = (!STRBGN | !STREND | !"\\") .
     | ESCAPE_PAREN
     | "\\" .

ESCAPE_PAREN = RS "("
	     | RS ")"
	     
String                  = STRBGN < StringCharacter* STREND >  ~string_literal(text)
                                

